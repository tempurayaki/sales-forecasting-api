import os
os.environ['TF_ENABLE_ONEDNN_OPTS'] = '0'  # Nonaktifkan oneDNN
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'   # Kurangi log verbosity

import numpy as np
import pandas as pd
from datetime import datetime
from sklearn.preprocessing import MinMaxScaler, RobustScaler
import joblib
import json

try:
    from tensorflow.keras.models import load_model
except TypeError:
    import collections.abc
    import sys
    sys.modules['collections.abc'] = collections.abc
    from tensorflow.keras.models import load_model
    
from flask import Flask, request, jsonify
from flask_cors import CORS

app = Flask(__name__)
CORS(app)  # Enable CORS for all routes

# Indonesian National Holidays 2024-2025
HOLIDAYS = pd.to_datetime([
    # 2024 Holidays
    '2024-01-01', '2024-02-08', '2024-02-09', '2024-02-10', '2024-02-14',
    '2024-03-11', '2024-03-12', '2024-03-29',
    '2024-04-08', '2024-04-09', '2024-04-10', '2024-04-11',
    '2024-05-01', '2024-05-09', '2024-05-10',
    '2024-05-23', '2024-05-24',
    '2024-06-01', '2024-06-17', '2024-06-18',
    '2024-07-07', '2024-08-17', '2024-09-16',
    '2024-11-27', '2024-12-25', '2024-12-26',

    # 2025 Holidays
    '2025-01-01',  # New Year's Day
    '2025-01-27',  # Isra Mi'raj
    '2025-01-28',  # Chinese New Year Holiday
    '2025-01-29',  # Chinese New Year
    '2025-03-28',  # Bali Hindu New Year Holiday
    '2025-03-29',  # Bali Hindu New Year
    '2025-03-31',  # Hari Raya Idul Fitri
    '2025-04-01', '2025-04-02', '2025-04-03', '2025-04-04',  # Lebaran Holiday
    '2025-04-07',  # Lebaran Holiday
    '2025-04-18',  # Good Friday
    '2025-04-20',  # Easter Sunday
    '2025-05-01',  # Labour Day
    '2025-05-12',  # Waisak Day
    '2025-05-13',  # Waisak Day Holiday
    '2025-05-29',  # Ascension Day of Jesus Christ
    '2025-05-30',  # Ascension Day Holiday
    '2025-06-01',  # Pancasila Day
    '2025-06-06',  # Idul Adha
    '2025-06-09',  # Idul Adha Holiday
    '2025-06-27',  # Islamic New Year
    '2025-08-17',  # Independence Day
    '2025-09-05',  # Prophet Muhammad's Birthday
    '2025-12-25',  # Christmas Day
    '2025-12-26',  # Christmas Holiday
])

HOLIDAYS = pd.to_datetime(HOLIDAYS) 

# Load model and scalers
model = load_model('model/my_model.h5')
scaler_X = joblib.load('model/scaler_X.save')
scaler_y = joblib.load('model/scaler_y.save')

with open('model/feature_metadata.json', 'r') as f:
    feature_metadata = json.load(f)
    FEATURE_ORDER = feature_metadata['feature_order']

def preprocess_input(data):
    # Membuat DataFrame dari input
    df = pd.DataFrame({
        'Date': pd.to_datetime(data['date']),
        'Sales': data['sales']
    })
    
    # Menambahkan kolom Is_Holiday berdasarkan apakah tanggal tersebut libur
    df['Is_Holiday'] = df['Date'].isin(HOLIDAYS).astype(int)
    
    # Feature engineering
    df['Year'] = df['Date'].dt.year
    df['Month'] = df['Date'].dt.month
    df['DayOfMonth'] = df['Date'].dt.day
    df['DayOfWeek'] = df['Date'].dt.dayofweek
    df['Week_Number'] = df['Date'].dt.isocalendar().week  # Week number
    df['Quarter'] = df['Date'].dt.quarter
    df['Is_EndOfMonth'] = df['DayOfMonth'] >= 25
    df['Is_WeekBeforeHoliday'] = df['Is_Holiday'].shift(-7).fillna(False).astype(int)
    df['Is_Weekend'] = df['DayOfWeek'].isin([5, 6]).astype(int)  # Weekend (Saturday and Sunday)
    df['Lag_1'] = df['Sales'].shift(1)
    df['Lag_7'] = df['Sales'].shift(7)
    df['RollingMean_7'] = df['Sales'].shift(1).rolling(window=7).mean()
    
    # Drop NaN values that are created by shifting
    df = df.dropna()

    # Apply one-hot encoding to 'DayOfWeek', 'Month', and 'Quarter'
    df = pd.get_dummies(df, columns=['Year', 'DayOfWeek', 'Month', 'Quarter'], drop_first=False)
    
    # Convert the boolean values (True/False) to integers (1/0)
    for col in df.columns:
        if col in ['Is_Holiday', 'Is_EndOfMonth'] or 'Year_' in col or 'Month_' in col or 'Quarter_' in col or 'DayOfWeek_' in col:
            df[col] = df[col].astype(int)

    # Pastikan semua kolom sesuai training
    missing_cols = set(FEATURE_ORDER) - set(df.columns)
    extra_cols = set(df.columns) - set(FEATURE_ORDER)
    
    # Tambahkan kolom yang hilang
    for col in missing_cols:
        df[col] = 0
        
    # Hapus kolom yang tidak diperlukan
    df = df.drop(columns=list(extra_cols))
    
    # Urutkan kolom PERSIS seperti saat training
    df = df[FEATURE_ORDER]
    
    return df

@app.route('/predict', methods=['POST'])
def predict():
    try:
        # ======================
        # 1. Input Validation
        # ======================
        input_data = request.json
        
        if not input_data:
            return jsonify({'error': 'No input data provided', 'status': 'error'}), 400
            
        required_fields = ['date', 'sales']
        missing_fields = [field for field in required_fields if field not in input_data]
        if missing_fields:
            return jsonify({
                'error': f'Missing required fields: {missing_fields}',
                'status': 'error',
                'expected_format': {
                    'date': 'List of dates (YYYY-MM-DD)',
                    'sales': 'List of numerical sales values',
                    'is_holiday': '[Optional] List of 0/1 values'
                }
            }), 400

        # ======================
        # 2. Data Preprocessing
        # ======================
        try:
            processed_data = preprocess_input(input_data)
        except Exception as e:
            return jsonify({
                'error': f'Preprocessing failed: {str(e)}',
                'status': 'error'
            }), 400

        # ======================
        # 3. Feature Validation
        # ======================
        # Load feature metadata saved during training
        with open('model/feature_metadata.json') as f:
            feature_metadata = json.load(f)
            expected_features = feature_metadata['feature_order']
        
        current_features = processed_data.columns.tolist()
        
        if len(current_features) != len(expected_features):
            return jsonify({
                'error': 'Feature dimension mismatch',
                'expected_feature_count': len(expected_features),
                'received_feature_count': len(current_features),
                'status': 'error'
            }), 400
            
        if current_features != expected_features:
            mismatches = [
                f"Pos {i}: {exp} (expected) vs {cur} (received)"
                for i, (exp, cur) in enumerate(zip(expected_features, current_features))
                if exp != cur
            ]
            return jsonify({
                'error': 'Feature order/name mismatch',
                'mismatches': mismatches,
                'status': 'error'
            }), 400

        # ======================
        # 4. Data Sufficiency Check
        # ======================
        min_required_days = 7  # Should match your model's lookback period
        if len(processed_data) < min_required_days:
            return jsonify({
                'error': 'Insufficient historical data',
                'minimum_required': min_required_days,
                'days_provided': len(input_data['date']),
                'days_usable_after_preprocessing': len(processed_data),
                'status': 'error'
            }), 400

        # ======================
        # 5. Model Prediction
        # ======================
        try:
            # Get last N days (N = model's lookback period)
            model_input = processed_data.iloc[-min_required_days:]
            
            # Scale features
            X_scaled = scaler_X.transform(model_input)
            
            # Reshape for LSTM (batch_size, timesteps, features)
            X_reshaped = X_scaled.reshape(1, min_required_days, len(expected_features))
            
            # Make prediction
            y_pred_scaled = model.predict(X_reshaped)
            y_pred = np.expm1(scaler_y.inverse_transform(y_pred_scaled))[0][0]
        except Exception as e:
            return jsonify({
                'error': f'Prediction failed: {str(e)}',
                'status': 'error'
            }), 500

        # ======================
        # 6. Prepare Response
        # ======================
        last_date = pd.to_datetime(input_data['date'][-1])
        prediction_date = last_date + pd.Timedelta(days=1)
        
        # Get holiday info (if holidays list exists)
        is_holiday = False
        if hasattr(HOLIDAYS, '__contains__'):
            is_holiday = prediction_date in HOLIDAYS
            
        return jsonify({
            'predicted_sales': round(float(y_pred), 2),
            'prediction_date': prediction_date.strftime('%Y-%m-%d'),
            'is_holiday': is_holiday,
            'features_used': expected_features,
            'status': 'success'
        })

    except Exception as e:
        return jsonify({
            'error': f'Unexpected error: {str(e)}',
            'status': 'error',
            'traceback': traceback.format_exc()
        }), 500


if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)